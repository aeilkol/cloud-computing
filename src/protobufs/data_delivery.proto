syntax = "proto3";

// Airport messages

enum AirportType {
  large_airport = 0;
  medium_airport = 1;
  small_aiprort= 2;
  heliport = 3;
  closed = 4;
}

message AirportRequest {
  string continent = 1;
  AirportType airport_type = 2;
}

message Location {
  float latitude = 1;
  float longitude = 2;
}

message Airport {
  string name = 1;
  string code = 2;
  Location location = 3;
  string type = 4;
}

message AirportResponse {
  repeated Airport airports = 1;
}

// Flight messages

message FlightRequest {
  string date = 1;
  string continent = 2;
}

message Flight {
  string src = 1;
  string dest = 2;
  int32 cardinality = 3;
}

message FlightResponse {
  repeated Flight flights = 1;
}

// Covid cases messages

message CovidCaseRequest {
  string date = 1;
  int32 area_level = 2;
}

message CovidCase {
  string region = 1;
  string date = 2;
  float incidence = 3;
}

message CovidCaseResponse {
  repeated CovidCase covid_cases = 1;
}

// Airport covid case messages

message AirportCovidCaseRequest {
  string airport_code = 1;
  int32 area_level = 2;
}

message AirportCovidCase {
  string date = 1;
  float incidence = 2;
}

message AirportCovidCaseResponse {
  repeated AirportCovidCase incidences = 1;
  string region = 2;
  string airport_code = 3;
}

// Flights by date messages

message FlightsByDateRequest {
  string airport_code = 1;
  bool origin = 2;
}

message FlightByDate {
  string date = 1;
  int32 count = 2;
}

message FlightsByDateResponse {
  repeated FlightByDate flights = 1;
}

// Service

service DataDelivery {
  rpc Airports (AirportRequest) returns (AirportResponse);
  rpc Flights (FlightRequest) returns (FlightResponse);
  rpc CovidCases (CovidCaseRequest) returns (CovidCaseResponse);
  rpc AirportCovidCases (AirportCovidCaseRequest) returns (AirportCovidCaseResponse);
  rpc FlightsByDate (FlightsByDateRequest) returns (FlightsByDateResponse);
}
