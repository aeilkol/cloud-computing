# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the main branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches:
      - main
      - aeilko

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: europe-west1 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: cloud-computing-cluster    # TODO: update to cluster name
  GKE_ZONE: europe-west1   # TODO: update to cluster zone
  DEPLOYMENT_NAME: cloud-computing-project # TODO: update to deployment name
  REPOSITORY: cloud-computing-repo # TODO: update to Artifact Registry docker repository
  IMAGE: outbound

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Build and push Docker images
      uses: docker/build-push-action@v1.1.0
      with:
        # Username used to log in to a Docker registry. If not set then no login will occur
        username: _json_key
        # Password or personal access token used to log in to a Docker registry. If not set then no login will occur
        password: ${{ secrets.GCLOUD_SERVICE_KEY }}
        # Server address of Docker registry. If not set then will default to Docker Hub
        registry: eu.gcr.io
        # Docker repository to tag the image with
        repository: ${{ secrets.GKE_PROJECT }}/outbound
        # Comma-delimited list of tags. These will be added to the registry/repository to form the image's tags
        tags: latest
        # Automatically tags the built image with the git reference as per the readme
        tag_with_ref: true
        # Automatically tags the built image with the git short SHA as per the readme
        tag_with_sha: true
        # Comma-delimited list of labels to add to the built image
        labels: github-action-build
        # Whether to push the image
        push: true

#jobs:
#  setup-build-publish-deploy:
#    name: Setup, Build, Publish, and Deploy
#    runs-on: ubuntu-latest
#    environment: production
#
#    permissions:
#      contents: 'read'
#      id-token: 'write'
#
#    steps:
#    - name: Checkout
#      uses: actions/checkout@v3
#
#    # Alternative option - authentication via credentials json
#    - name: Authenticate to Google Cloud
#      id: 'auth'
#      uses: 'google-github-actions/auth@v0'
#      with:
#        token_format: access_token
#        credentials_json: '${{ secrets.GCLOUD_SERVICE_KEY }}'
#
#    - name: Docker configuration
#      run: |-
#        echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
#    # Get the GKE credentials so we can deploy to the cluster
#    - name: Set up GKE credentials
#      uses: google-github-actions/get-gke-credentials@v0
#      with:
#        cluster_name: ${{ env.GKE_CLUSTER }}
#        location: ${{ env.GKE_ZONE }}
#
#    # Build the Docker image
#    - name: Build
#      run: |-
#        cd src
#        docker build \
#          --tag "eu.gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
#          --build-arg GITHUB_SHA="$GITHUB_SHA" \
#          --build-arg GITHUB_REF="$GITHUB_REF" \
#          --file=outbound/Dockerfile \
#          .
#
#    # Push the Docker image to Google Artifact Registry
#    - name: Publish
#      run: |-
#        docker push "eu.gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"
    # Set up kustomize
#    - name: Set up Kustomize
#      run: |-
#        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
#        chmod u+x ./kustomize
#    # Deploy the Docker image to the GKE cluster
#    - name: Deploy
#      run: |-
#        # replacing the image name in the k8s template
#        ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
#        ./kustomize build . | kubectl apply -f -
#        kubectl rollout status deployment/$DEPLOYMENT_NAME
#        kubectl get services -o wide
